openapi: 3.0.3 #checkov:skip=CKV_OPENAPI_4:.
info:
  title: ReVIEW API
  description: |
    API for Recorded Voice Insight Extraction Webapp (ReVIEW)
    
    This API provides endpoints for interacting with the ReVIEW application, including:
    - Invoking LLM models for text generation
    - Interacting with DynamoDB for data storage and retrieval
    - Generating S3 presigned URLs for file operations
    - Managing knowledge base jobs and documents
    - Retrieving and translating subtitles
  version: 1.0.0
  
servers:
  - url: https://api-gateway-url/
    description: API Gateway endpoint

components:
  securitySchemes:
    cognitoAuth:
      type: http #checkov:skip=CKV_OPENAPI_3:.
      scheme: bearer
      bearerFormat: JWT
      description: Cognito User Pool authentication with JWT token

  schemas:
    Error:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        body:
          type: string
          example: "Invalid action"
    
    # LLM Request/Response
    LLMRequest:
      type: object
      required:
        - foundation_model_id
        - system_prompt
        - main_prompt
        - bedrock_kwargs
      properties:
        foundation_model_id:
          type: string
          description: ID of the foundation model to use
          example: "anthropic.claude-3-5-sonnet-20240620-v1:0"
        system_prompt:
          type: string
          description: System prompt for the LLM
          example: "You are a helpful assistant that analyzes transcripts."
        main_prompt:
          type: string
          description: Main prompt for the LLM
          example: "Summarize the following transcript: {transcript}"
        bedrock_kwargs:
          type: object
          description: Additional parameters for Bedrock
          properties:
            temperature:
              type: number
              description: Controls randomness in the output (0.0 to 1.0)
              example: 0
            maxTokens:
              type: integer
              description: Maximum number of tokens to generate
              example: 2000
            topP:
              type: number
              description: Controls diversity via nucleus sampling
              example: 0.9
            topK:
              type: integer
              description: Controls diversity via top-k sampling
              example: 250
            stopSequences:
              type: array #checkov:skip=CKV_OPENAPI_21:.
              description: Sequences where the model will stop generating further tokens
              items:
                type: string
              example: ["###", "END"]
          example: {"temperature": 0, "maxTokens": 2000}
    
    LLMResponse:
      type: string
      description: Generated text from the LLM
      example: "This is the generated response from the LLM model."
    
    # DynamoDB Request/Response
    DDBRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The DynamoDB action to perform
          enum:
            - retrieve_all_items
            - retrieve_analysis_by_jobid
            - store_analysis_result
            - retrieve_jobid_by_media_name
            - update_ddb_entry
            - update_job_status
            - create_ddb_entry
            - retrieve_media_name_by_jobid
            - delete_ddb_entry
        username:
          type: string
          description: Username of the current user
          example: "user123"
        max_rows:
          type: integer
          description: Maximum number of rows to return (for retrieve_all_items)
          nullable: true
          example: 10
        job_id:
          type: string
          description: UUID of the job
          example: "550e8400-e29b-41d4-a716-446655440000"
        template_id:
          type: integer
          description: ID of the analysis template
          example: 1
        analysis_result:
          type: string
          description: Result of the analysis to store
          example: "This is the analysis result text."
        media_name:
          type: string
          description: Name of the media file
          example: "meeting_recording.mp4"
        new_item_name:
          type: string
          description: Name of the new item to add or update (for update_ddb_entry)
          example: "vtt_transcript_uri"
        new_item_value:
          type: string
          description: Value of the new item to add or update (for update_ddb_entry)
          example: "s3://bucket/transcripts/user123/550e8400-e29b-41d4-a716-446655440000.vtt"
        new_status:
          type: string
          description: New job status (for update_job_status)
          enum:
            - "Transcribing"
            - "Indexing"
            - "Transcription Complete"
            - "Completed"
            - "Failed"
            - "In Transcription Queue"
        media_uri:
          type: string
          description: URI of the media file (for create_ddb_entry)
          example: "s3://bucket/recordings/user123/meeting_recording.mp4"
    
    DDBResponse:
      oneOf:
        - type: array
          items:
            type: object
            properties:
              UUID:
                type: string
                example: "550e8400-e29b-41d4-a716-446655440000"
              username:
                type: string
                example: "user123"
              media_name:
                type: string
                example: "meeting_recording.mp4"
              job_creation_time:
                type: string
                example: "2024-04-29 12:34:56"
              job_status:
                type: string
                example: "Completed"
              media_uri:
                type: string
                example: "s3://bucket/recordings/user123/meeting_recording.mp4"
        - type: string
          description: Response message or single value
          example: "Analysis stored successfully"
        - type: object
          description: Single item response
    
    # S3 Presigned URL Request/Response
    S3PresignedRequest:
      type: object
      required:
        - action
        - username
      properties:
        action:
          type: string
          description: The S3 action to perform
          enum:
            - upload_media_file
            - download_media_file
            - download_transcript_txt_file
        username:
          type: string
          description: Username of the current user
          example: "user123"
        media_file_name:
          type: string
          description: Name of the media file (for upload_media_file and download_media_file)
          example: "meeting_recording.mp4"
        job_id:
          type: string
          description: UUID of the job (for download_transcript_txt_file)
          example: "550e8400-e29b-41d4-a716-446655440000"
    
    S3PresignedResponse:
      oneOf:
        - type: object
          description: Presigned POST URL for uploading files
          properties:
            url:
              type: string
              description: The URL to POST the file to
              example: "https://bucket.s3.amazonaws.com/"
            fields:
              type: object
              description: Fields to include in the POST form
              properties:
                key:
                  type: string
                  example: "recordings/user123/meeting_recording.mp4"
                bucket:
                  type: string
                  example: "review-app-bucket"
                X-Amz-Algorithm:
                  type: string
                  example: "AWS4-HMAC-SHA256"
                X-Amz-Credential:
                  type: string
                  example: "AKIAIOSFODNN7EXAMPLE/20240429/us-east-1/s3/aws4_request" #checkov:skip=CKV_SECRET_2:Not a real access key
                X-Amz-Date:
                  type: string
                  example: "20240429T123456Z"
                X-Amz-Signature:
                  type: string
                  example: "abcdef1234567890abcdef1234567890abcdef1234567890"
                Policy:
                  type: string
                  example: "eyJleHBpcmF0aW9uIjoiMjAyMC0wNi0wMVQwMDowMDowMFoiLCJjb..."
        - type: string
          description: Presigned GET URL for downloading files
          example: "https://bucket.s3.amazonaws.com/recordings/user123/meeting_recording.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=..."
    
    # KB Job Deletion Request/Response
    KBJobDeletionRequest:
      type: object
      required:
        - username
        - job_id
      properties:
        username:
          type: string
          description: Username of the current user
          example: "user123"
        job_id:
          type: string
          description: UUID of the job to delete
          example: "550e8400-e29b-41d4-a716-446655440000"
    
    KBJobDeletionResponse:
      type: string
      description: Status message for job deletion
      example: "Deletion for username='user123' UUID='550e8400-e29b-41d4-a716-446655440000' successful."
    
    # Subtitles Request/Response
    SubtitlesRequest:
      type: object
      required:
        - username
        - transcript_job_id
      properties:
        username:
          type: string
          description: Username of the current user
          example: "user123"
        transcript_job_id:
          type: string
          description: UUID of the transcript job
          example: "550e8400-e29b-41d4-a716-446655440000"
        translation_start_time:
          type: integer
          description: Start time in seconds for translation (optional)
          nullable: true
          example: 60
        translation_duration:
          type: integer
          description: Duration in seconds for translation (optional)
          nullable: true
          example: 30
        translation_destination_language:
          type: string
          description: Target language for translation (optional)
          nullable: true
          example: "Spanish"
    
    SubtitlesResponse:
      type: string
      description: VTT subtitle content
      example: "WEBVTT\n\n00:00:01.000 --> 00:00:05.000\nHello, welcome to the meeting.\n\n00:00:06.000 --> 00:00:10.000\nLet's discuss the agenda for today."
    
    # WebSocket Message Schemas
    WebSocketMessage:
      type: object
      required:
        - action
        - messages
        - username
      properties:
        action:
          type: string
          default: "$default"
          description: WebSocket action to perform
        messages:
          type: string
          description: JSON stringified messages array
          example: "[{\"role\":\"user\",\"content\":[{\"text\":\"What was discussed in the meeting?\"}]}]"
        username:
          type: string
          description: Username of the current user
          example: "user123"
        media_names:
          type: string
          description: JSON stringified array of media names
          nullable: true
          example: "[\"meeting_recording.mp4\",\"presentation.mp4\"]"
        transcript_job_id:
          type: string
          description: UUID of the transcript job (when querying a single file)
          nullable: true
          example: "550e8400-e29b-41d4-a716-446655440000"
    
    Citation:
      type: object
      properties:
        media_name:
          type: string
          description: Name of the media file containing the citation
          example: "meeting_recording.mp4"
        timestamp:
          type: integer
          description: Timestamp in seconds where the citation occurs
          example: 123
    
    PartialAnswer:
      type: object
      properties:
        partial_answer:
          type: string
          description: Part of the answer text
          example: "The meeting discussed the quarterly budget report."
        citations:
          type: array
          description: Citations supporting this part of the answer
          items:
            $ref: '#/components/schemas/Citation'
    
    FullQAnswer:
      type: object
      properties:
        answer:
          type: array
          description: Array of partial answers that make up the complete response
          items:
            $ref: '#/components/schemas/PartialAnswer'

paths:
  /llm:
    post:
      summary: Invoke LLM models
      description: |
        Invoke Bedrock foundation models for text generation.
        This endpoint allows you to send prompts to various LLM models and receive generated text responses.
      security:
        - cognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMRequest'
            examples:
              basic:
                summary: Basic LLM request
                value:
                  foundation_model_id: "anthropic.claude-3-5-sonnet-20240620-v1:0"
                  system_prompt: "You are a helpful assistant that analyzes transcripts."
                  main_prompt: "Summarize the following transcript: {transcript}"
                  bedrock_kwargs: {"temperature": 0, "maxTokens": 2000}
              advanced:
                summary: Advanced LLM request with additional parameters
                value:
                  foundation_model_id: "anthropic.claude-3-5-sonnet-20240620-v1:0"
                  system_prompt: "You are a helpful assistant that analyzes transcripts."
                  main_prompt: "Identify the key topics discussed in this meeting transcript: {transcript}"
                  bedrock_kwargs: {"temperature": 0.2, "maxTokens": 4000, "topP": 0.9, "topK": 250}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMResponse'
              example: "The transcript covers a team meeting discussing the Q2 marketing strategy. Key points include budget allocation for digital campaigns, timeline for the product launch in August, and coordination needed with the sales team."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /ddb:
    post:
      summary: Interact with DynamoDB
      description: |
        Query and update DynamoDB tables.
        This endpoint provides multiple operations for interacting with the application's database.
      security:
        - cognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DDBRequest'
            examples:
              retrieveAllItems:
                summary: Retrieve all items for a user
                value:
                  action: "retrieve_all_items"
                  username: "user123"
                  max_rows: 10
              retrieveAnalysis:
                summary: Retrieve analysis by job ID
                value:
                  action: "retrieve_analysis_by_jobid"
                  job_id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "user123"
                  template_id: 1
              storeAnalysis:
                summary: Store analysis result
                value:
                  action: "store_analysis_result"
                  job_id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "user123"
                  template_id: 1
                  analysis_result: "This is the analysis result text."
              retrieveJobId:
                summary: Retrieve job ID by media name
                value:
                  action: "retrieve_jobid_by_media_name"
                  username: "user123"
                  media_name: "meeting_recording.mp4"
              updateEntry:
                summary: Update DynamoDB entry
                value:
                  action: "update_ddb_entry"
                  job_id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "user123"
                  new_item_name: "vtt_transcript_uri"
                  new_item_value: "s3://bucket/transcripts/user123/550e8400-e29b-41d4-a716-446655440000.vtt"
              updateJobStatus:
                summary: Update job status
                value:
                  action: "update_job_status"
                  job_id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "user123"
                  new_status: "Completed"
              createEntry:
                summary: Create new DynamoDB entry
                value:
                  action: "create_ddb_entry"
                  job_id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "user123"
                  media_uri: "s3://bucket/recordings/user123/meeting_recording.mp4"
              retrieveMediaName:
                summary: Retrieve media name by job ID
                value:
                  action: "retrieve_media_name_by_jobid"
                  job_id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "user123"
              deleteEntry:
                summary: Delete DynamoDB entry
                value:
                  action: "delete_ddb_entry"
                  job_id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "user123"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DDBResponse'
              examples:
                itemsList:
                  summary: List of items
                  value: [
                    {
                      "UUID": "550e8400-e29b-41d4-a716-446655440000",
                      "username": "user123",
                      "media_name": "meeting_recording.mp4",
                      "job_creation_time": "2024-04-29 12:34:56",
                      "job_status": "Completed",
                      "media_uri": "s3://bucket/recordings/user123/meeting_recording.mp4"
                    },
                    {
                      "UUID": "660e8400-e29b-41d4-a716-446655440001",
                      "username": "user123",
                      "media_name": "presentation.mp4",
                      "job_creation_time": "2024-04-28 10:15:30",
                      "job_status": "Completed",
                      "media_uri": "s3://bucket/recordings/user123/presentation.mp4"
                    }
                  ]
                stringResponse:
                  summary: String response
                  value: "Analysis stored successfully"
                singleItem:
                  summary: Single item response
                  value: "meeting_recording.mp4"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /s3-presigned:
    post:
      summary: Generate S3 presigned URLs
      description: |
        Generate presigned URLs for uploading and downloading files from S3.
        This endpoint provides URLs that allow temporary, secure access to S3 objects.
      security:
        - cognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/S3PresignedRequest'
            examples:
              uploadMedia:
                summary: Generate URL for uploading media file
                value:
                  action: "upload_media_file"
                  username: "user123"
                  media_file_name: "meeting_recording.mp4"
              downloadMedia:
                summary: Generate URL for downloading media file
                value:
                  action: "download_media_file"
                  username: "user123"
                  media_file_name: "meeting_recording.mp4"
              downloadTranscript:
                summary: Generate URL for downloading transcript text file
                value:
                  action: "download_transcript_txt_file"
                  username: "user123"
                  job_id: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3PresignedResponse'
              examples:
                postUrl:
                  summary: Presigned POST URL for upload
                  value: {
                    "url": "https://bucket.s3.amazonaws.com/",
                    "fields": {
                      "key": "recordings/user123/meeting_recording.mp4",
                      "bucket": "review-app-bucket",
                      "X-Amz-Algorithm": "AWS4-HMAC-SHA256",
                      "X-Amz-Credential": "AKIAIOSFODNN7EXAMPLE/20240429/us-east-1/s3/aws4_request",
                      "X-Amz-Date": "20240429T123456Z",
                      "X-Amz-Signature": "abcdef1234567890abcdef1234567890abcdef1234567890",
                      "Policy": "eyJleHBpcmF0aW9uIjoiMjAyMC0wNi0wMVQwMDowMDowMFoiLCJjb..."
                    }
                  }
                getUrl:
                  summary: Presigned GET URL for download
                  value: "https://bucket.s3.amazonaws.com/recordings/user123/meeting_recording.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIOSFODNN7EXAMPLE%2F20240429%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240429T123456Z&X-Amz-Expires=1800&X-Amz-SignedHeaders=host&X-Amz-Signature=abcdef1234567890abcdef1234567890abcdef1234567890"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /kb-job-deletion:
    post:
      summary: Delete knowledge base job
      description: |
        Delete a job and associated files from the knowledge base.
        This endpoint removes documents from the Bedrock Knowledge Base and deletes associated files from S3.
      security:
        - cognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KBJobDeletionRequest'
            example:
              username: "user123"
              job_id: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KBJobDeletionResponse'
              example: "Deletion for username='user123' UUID='550e8400-e29b-41d4-a716-446655440000' successful."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: {
                "statusCode": 400,
                "body": "Error in deletion for username='user123' UUID='550e8400-e29b-41d4-a716-446655440000': Document not found"
              }
  
  /subtitles:
    post:
      summary: Retrieve subtitles
      description: |
        Retrieve and optionally translate subtitles for a media file.
        This endpoint returns VTT format subtitles and can translate them to a specified language.
      security:
        - cognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubtitlesRequest'
            examples:
              basicSubtitles:
                summary: Retrieve subtitles without translation
                value:
                  username: "user123"
                  transcript_job_id: "550e8400-e29b-41d4-a716-446655440000"
              translatedSubtitles:
                summary: Retrieve translated subtitles
                value:
                  username: "user123"
                  transcript_job_id: "550e8400-e29b-41d4-a716-446655440000"
                  translation_start_time: 60
                  translation_duration: 30
                  translation_destination_language: "Spanish"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubtitlesResponse'
              example: "WEBVTT\n\n00:00:01.000 --> 00:00:05.000\nHello, welcome to the meeting.\n\n00:00:06.000 --> 00:00:10.000\nLet's discuss the agenda for today."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Service unavailable (throttling)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Throttling error: RequestLimitExceeded"
